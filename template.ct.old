'start
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 # you can test number from 0 to 16
# Default pointers
'#0:16
'#1:1
'#2:2
'#3:3
'#4:4
'#5:5
'#6:6
'#7:7
'#8:8
'#9:9
'#A:10
'#B:11
'#C:12
'#D:13
'#E:14
'#F:15
'#null:0
_0 = ('#0)
_1 = ('#1)
_2 = ('#2)
_3 = ('#3)
_4 = ('#4)
_5 = ('#5)
_6 = ('#6)
_7 = ('#7)
_8 = ('#8)
_9 = ('#9)
_A = ('#A)
_B = ('#B)
_C = ('#C)
_D = ('#D)
_E = ('#E)
_F = ('#F)

# delimiter for compiled version (to see the result better)
7070
# return value from functions

'#return_0:0
'#return_1:0
'#return_2:0
'#return_3:0
'#return_4:0
'#return_5:0
'#return_6:0
'#return_7:0
'#return_8:0
'#return_9:0
'#return_A:0
'#return_B:0
'#return_C:0
'#return_D:0
'#return_E:0
'#return_F:0

7070

'#temp_1:0
'#temp_2:0
'#temp_3:0
'#temp_4:0

7070


no_op = (1 1)
earasable = (999)

stop = (~+2 0 ~-2) # Stop the program

# self.0 :  [0-9] number to test
# self.1 : '*     case jump if element in self.2 same as self.0
# self.2 : '[0-9]
# -- example --
#    switch(self.0 'ifOne '#1 'ifTwo '#2) # will jump to 'ifOne if self.0 is 1
# -- warning --
# Don't test for other thing that 0-9, because it will corrupt memory at all possibilitys position
# use safe_switch_<number_of_values> for a safe switch
switch {
    self.0 'test
    self.1..
    'test:earasable 0
}

# self.0: case to test
# self.1: first element to test, jump to self.2 if true
# self.3: 2nd element to test, jump to self.4 if true
safe_switch_2val {
    self.0 'test
    # save and prepare cases
    self.1 '1_save
    'case1 self.1
    self.3 '2_save
    'case2 self.3
    'test:earasable 0 # test
    # restore and jump
    'case1:'1_save self.1 ~+2 0 self.2
    'case2:'2_save self.3 ~+2 0 self.4
    '1_save:0
    '2_save:0
}

# self.0: case to test
# self.1: first element to test, jump to self.2 if true
# self.3: 2nd element to test, jump to self.4 if true
# etc.. until self.7 => self.8
safe_switch_4val {
    self.0 'test
    # save and prepare cases
    self.1 '1_save
    'case1 self.1
    self.3 '2_save
    'case2 self.3
    self.5 '3_save
    'case3 self.5
    self.7 '4_save
    'case4 self.7
    'test:earasable 0 # test
    # restore and jump
    'case1:'1_save self.1 ~+2 0 self.2
    'case2:'2_save self.3 ~+2 0 self.4
    'case3:'3_save self.5 ~+2 0 self.6
    'case4:'4_save self.7 ~+2 0 self.8
    '1_save:0
    '2_save:0
    '3_save:0
    '4_save:0
}

# jump to self.0
jump {~+2 0 self.0}

# self.0 = 'code 
exit {
    self.0 '#return_0 stop
}

# self.0 : (0|1)
# self.1 : (0|1)
# self.2 : case to jump if True
and {
    switch(self.0 'continue '#1)
    switch(self.1 'continue '#1)
    jump(self.2)
    'continue:no_op
}

# self.0 : '[0-F]
# increment value at self.0
inc {
    self.0 'test
    '#F 14
    '#E 13
    '#D 12
    '#C 11
    '#B 10
    '#A 9
    '#9 8
    '#8 7
    '#7 6
    '#6 5
    '#5 4
    '#4 3
    '#3 2
    '#2 1
    '#1 16
    '#0 15
    'test:earasable self.0
}

# self.0 : '[0-F]
# decrement value at self.0
dec {
    self.0 'test
    '#F 16
    '#E 15
    '#D 14
    '#C 13
    '#B 12
    '#A 11
    '#9 10
    '#8 9
    '#7 8
    '#6 7
    '#5 6
    '#4 5
    '#3 4
    '#2 3
    '#1 2
    '#0 1
    'test:earasable self.0
}

# self.0 : '[0-F]
# jump to self.1 if self.0 is 0 
if_0 {
    self.0 'test
    'pt 16
    'end 15
    'end 14
    'end 13
    'end 12
    'end 11
    'end 10
    'end 9
    'end 8
    'end 7
    'end 6
    'end 5
    'end 4
    'end 3
    'end 2
    'end 1
    'test:earasable 0
    jump('end1)
    'pt:self.1
    'end:~+1
    'end1:no_op
}

# header VAR_DEF

# header FUNCTION_DEF

7070

'start:no_op

# header CODE

exit('#0)